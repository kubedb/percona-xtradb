name: CI

on:
  push:
    branches-ignore:
      - 'release-*'
    tags-ignore:
      - '*.*'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Run checks
      run: |
        sudo apt-get -qq update || true
        sudo apt-get install -y bzr
        make ci

    - name: Build
      env:
        REGISTRY: kubedbci
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
      run: |
        docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
        make push

    - name: Check out Stash operator and build
      env:
        REGISTRY: kubedbci
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
      run: |
        docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
        cd ../.. && mkdir -p stash.appscode.dev && cd stash.appscode.dev
        git clone https://github.com/stashed/stash
        cd stash && git checkout master
        make push

  kubernetes:
    name: Kubernetes
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        cluster: [v1.12.10, v1.14.6, v1.16.2]
        db: [5.7, 5.7-cluster]
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Create Kubernetes ${{ matrix.cluster }} cluster
      id: kind
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: v0.6.1
        config: hack/kubernetes/kind.yaml
        image: kindest/node:${{ matrix.cluster }}

    - name: Prepare cluster for testing
      id: local-path
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
        REGISTRY_SECRET: regcred
      run: |
        echo "waiting for nodes to be ready ..."
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        echo
        echo "installing local-path provisioner ..."
        kubectl delete storageclass --all
        kubectl apply -f https://github.com/kmodules/local-path-provisioner/raw/k-1.11/deploy/local-path-storage.yaml
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m
        kubectl apply -f hack/kubernetes/storageclass/standard.yaml
        echo
        echo "install helm 3"
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        echo
        echo "create docker-registry secret"
        kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

    - name: Check out installer
      run: |
        cd ..
        git clone https://github.com/kubedb/installer.git
        cd installer
        git checkout master

    - name: Check out Stash operator and installer
      run: |
        cd ../.. && mkdir -p stash.appscode.dev && cd stash.appscode.dev
        git clone https://github.com/stashed/installer
        cd installer && git checkout master
        cd ..
        git clone https://github.com/stashed/stash
        cd stash && git checkout master

    - name: Install stash and addons
      env:
        REGISTRY: kubedbci
      run: |
        #export KUBECONFIG="$(kind get kubeconfig-path)"
        make stash-install

    - name: Run e2e tests
      env:
        REGISTRY: kubedbci
        REGISTRY_SECRET: regcred
        TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
        GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
      run: |
        echo "preparing test credentials"
        mkdir -p hack/config
        echo -n "$TEST_CREDENTIALS" > hack/config/.env
        echo >> hack/config/.env
        echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
        make install
        kubectl get pxversion
        kubectl patch -p '{"spec":{"db":{"image":"kubedb/percona-xtradb-cluster:v5.7-cluster"}}}' --type="merge" pxversion 5.7-cluster
        kubectl patch -p '{"spec":{"db":{"image":"kubedb/percona:v5.7"}}}' --type="merge" pxversion 5.7
        echo
        #make e2e-parallel TEST_ARGS="--db-catalog=${{ matrix.db }}"|| (kubectl describe deployment -n kube-system kubedb; kubectl logs -n kube-system deployment/kubedb; kubectl describe deployment -n kube-system stash; kubectl logs -n kube-system deployment/stash operator; exit 1;)
        make e2e-tests GINKGO_ARGS="-p -stream --flakeAttempts=2" TEST_ARGS="--db-catalog=${{ matrix.db }}"|| (kubectl describe deployment -n kube-system kubedb; kubectl logs -n kube-system deployment/kubedb; kubectl describe deployment -n kube-system stash; kubectl logs -n kube-system deployment/stash operator; exit 1;)
